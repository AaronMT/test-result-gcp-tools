name: Batch process Android minidump crash reports on Cloud Storage from Firebase Test Lab

on:
   workflow_dispatch:

jobs:
    download_minidumps:
        name: Batch process Android minidump crash reports for ${{ matrix.project.name }}
        runs-on: ubuntu-latest
        strategy:
          matrix:
              project:
                  - name: "Fenix"
                    bucket_name: "GCS_BUCKET_NAME_A"
                  - name: "Focus"
                    bucket_name: "GCS_BUCKET_NAME_B"
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v4.1.7
            - name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v2.1.5
              with:
                credentials_json: ${{ secrets.GCP_SA_KEY }}
            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v2.1.1
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}
            - name: Download Android minidump crash reports from the last 24 hours from Google Cloud Storage
              env:
                GCS_BUCKET_NAME: ${{ secrets[matrix.project.bucket_name] }}
              run: |
                chmod u+x ./scripts/src/gsutil_crash_batch.sh
                ./scripts/src/gsutil_crash_batch.sh
            - name: Check for crash reports
              id: check_for_reports
              run: |
                  if [ -d "crash_reports" ] && [ "$(find crash_reports -type f | wc -l)" -gt 0 ]; then
                    echo "Crash reports found."
                    echo "has_reports=true" >> $GITHUB_OUTPUT
                  else
                    echo "No crash reports found."
                    echo "has_reports=false" >> $GITHUB_OUTPUT
                  fi
            - name: Archive the reports into a zip file
              if: steps.check_for_reports.outputs.has_reports == 'true'
              run: |
                  ZIP_FILE="crash_reports_${{ matrix.project.name }}_$(date +%Y%m%d_%H%M%S).zip"
                  zip -r "$ZIP_FILE" crash_reports/
                  echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
            - name: Upload artifact
              if: steps.check_for_reports.outputs.has_reports == 'true'
              uses: actions/upload-artifact@v4.4.0
              with:
                name: crash-reports-${{ matrix.project.name }}
                path: ${{ env.ZIP_FILE }}
                retention-days: 1
    process_minidumps:
        name: Process Android minidump crash reports
        runs-on: ubuntu-latest
        needs: download_minidumps
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v4.1.7
            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Install minidump-stackwalk
              run: |
                cargo install minidump-stackwalk
            - name: Download crash reports artifact
              uses: actions/download-artifact@v4.1.8
              with:
                path: crash_reports
              continue-on-error: true
            - name: Unzip crash reports
              run: |
                if ls crash_reports/**/crash_reports_*.zip 1> /dev/null 2>&1; then
                    mkdir -p crash_reports_unzipped
                    for zip_file in crash_reports/**/crash_reports_*.zip; do
                        project_name=$(basename "$zip_file" | cut -d'_' -f3)
                        echo "Extracted project_name: $project_name"
                        echo "Unzipping $zip_file for project $project_name"
                        unzip "$zip_file" -d "crash_reports_unzipped/$project_name"
                    done
                else
                    echo "No crash reports zip files found."
                    exit 0  # Exit gracefully if no zip files are found
                fi
            - name: Process the crash reports
              run: |
                shopt -s nullglob  # Enable nullglob
                project_dirs=(crash_reports_unzipped/*/crash_reports/*/)
                if [ ${#project_dirs[@]} -gt 0 ]; then
                    for project_dir in "${project_dirs[@]}"; do
                        echo "Processing crash reports in: $project_dir"
                        ls -al "$project_dir"

                        json_file="$project_dir/matrix_ids.json"
                        if [ -f "$json_file" ]; then
                            echo "Found matrix_ids.json: $json_file"

                            # Extract geckoRev and matrixLabel using jq
                            geckoRev=$(jq -r '.[].clientDetails.geckoRev' "$json_file")
                            matrixLabel=$(jq -r '.[].clientDetails.matrixLabel' "$json_file")
                            echo "Extracted geckoRev: $geckoRev"
                            echo "Extracted matrixLabel: $matrixLabel"

                            # Check if geckoRev and matrixLabel are not empty
                            if [ -z "$geckoRev" ] || [ -z "$matrixLabel" ]; then
                                echo "geckoRev or matrixLabel is empty. Skipping..."
                                continue
                            fi

                            # Construct the symbols URL
                            symbols_url="https://firefox-ci-tc.services.mozilla.com/index/gecko.v2.${matrixLabel}.revision.${geckoRev}.mobile.android-aarch64-opt/artifacts/public%2Fbuild%2Ftarget.crashreporter-symbols.zip"
                            echo "Symbols URL: $symbols_url"
                         else
                            echo "No matrix_ids.json found in $project_dir. Skipping..."
                        fi
                    done
                else
                    echo "No projects found in crash_reports_unzipped."
                    exit 0  # Exit gracefully if no projects are found
                fi
