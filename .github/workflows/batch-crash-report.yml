name: Batch process Android minidump crash reports on Cloud Storage from Firebase Test Lab

on:
    workflow_dispatch:
    schedule:
        - cron: '0 5 * * *'  # Runs at 5:00 AM UTC every day


jobs:
    download_minidumps:
        name: Batch process Android minidump crash reports for ${{ matrix.project.name }}
        runs-on: ubuntu-latest
        strategy:
          matrix:
              project:
                  - name: "Fenix"
                    bucket_name: "GCS_BUCKET_NAME_A"
                  - name: "Focus"
                    bucket_name: "GCS_BUCKET_NAME_B"
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v5.0.0
            - name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v3.0.0
              with:
                credentials_json: ${{ secrets.GCP_SA_KEY }}
            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v3.0.0
              with:
                project_id: ${{ secrets.GCP_PROJECT_ID }}
            - name: Download Android minidump crash reports from the last 24 hours from Google Cloud Storage
              env:
                GCS_BUCKET_NAME: ${{ secrets[matrix.project.bucket_name] }}
              run: |
                chmod u+x ./scripts/src/gsutil_crash_batch.sh
                ./scripts/src/gsutil_crash_batch.sh
            - name: Check for crash reports
              id: check_for_reports
              run: |
                  if [ -d "crash_reports" ] && [ "$(find crash_reports -type f | wc -l)" -gt 0 ]; then
                    echo "Crash reports found."
                    echo "has_reports=true" >> $GITHUB_OUTPUT
                  else
                    echo "No crash reports found."
                    echo "has_reports=false" >> $GITHUB_OUTPUT
                  fi
            - name: Archive the reports into a zip file
              if: steps.check_for_reports.outputs.has_reports == 'true'
              run: |
                  ZIP_FILE="crash_reports_${{ matrix.project.name }}_$(date +%Y%m%d_%H%M%S).zip"
                  zip -r "$ZIP_FILE" crash_reports/
                  echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
            - name: Upload artifact
              if: steps.check_for_reports.outputs.has_reports == 'true'
              uses: actions/upload-artifact@v4.6.2
              with:
                name: crash-reports-${{ matrix.project.name }}
                path: ${{ env.ZIP_FILE }}
                retention-days: 1
    process_minidumps:
        name: Process Android minidump crash reports
        runs-on: ubuntu-latest
        needs: download_minidumps
        outputs:
          crash_stack_processed: ${{ steps.process_minidumps.outputs.crash_stack_processed }}
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v5.0.0
            - name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v3.0.0
              with:
                credentials_json: ${{ secrets.GCP_SA_KEY }}
            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
            - name: Install minidump-stackwalk
              run: |
                cargo install minidump-stackwalk
            - name: Download crash reports artifact
              uses: actions/download-artifact@v5.0.0
              with:
                path: crash_reports
              continue-on-error: true
            - name: Unzip crash reports
              run: |
                if ls crash_reports/**/crash_reports_*.zip 1> /dev/null 2>&1; then
                    mkdir -p crash_reports_unzipped
                    for zip_file in crash_reports/**/crash_reports_*.zip; do
                        project_name=$(basename "$zip_file" | cut -d'_' -f3)
                        echo "Extracted project_name: $project_name"
                        echo "Unzipping $zip_file for project $project_name"
                        unzip "$zip_file" -d "crash_reports_unzipped/$project_name"
                    done
                else
                    echo "No crash reports zip files found."
                    exit 0  # Exit gracefully if no zip files are found
                fi
            - name: Process the crash reports
              id: process_minidumps
              run: |
                shopt -s nullglob  # Enable nullglob
                crash_stack_processed=false
                mkdir -p processed_crash_reports
                project_dirs=(crash_reports_unzipped/*/crash_reports/*/)
                if [ ${#project_dirs[@]} -gt 0 ]; then
                    for project_dir in "${project_dirs[@]}"; do
                        echo "Processing crash reports in: $project_dir"
                        ls -al "$project_dir"

                        matrix_json_file="$project_dir/matrix_ids.json"
                        if [ -f "$matrix_json_file" ]; then
                            echo "Found matrix_ids.json: $matrix_json_file"

                            # Extract geckoRev and matrixLabel using jq
                            geckoRev=$(jq -r '.[].clientDetails.geckoRev' "$matrix_json_file")
                            matrixLabel=$(jq -r '.[].clientDetails.matrixLabel' "$matrix_json_file")
                            echo "Extracted geckoRev: $geckoRev"
                            echo "Extracted matrixLabel: $matrixLabel"

                            # Check if geckoRev and matrixLabel are not empty
                            if [ -z "$geckoRev" ] || [ -z "$matrixLabel" ]; then
                                echo "geckoRev or matrixLabel is empty. Skipping..."
                                continue
                            fi

                            # Construct the symbols URL
                            symbols_url="https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.v2.${matrixLabel}.revision.${geckoRev}.mobile.android-aarch64-opt/artifacts/public%2Fbuild%2Ftarget.crashreporter-symbols.zip"
                            echo "Symbols URL: $symbols_url"

                            # Create a temporary directory for symbols
                            symbols_dir="$project_dir/symbols"
                            mkdir -p "$symbols_dir"

                            # Download the symbols
                            echo "Downloading symbols..."
                            wget -q -O "$project_dir/target.crashreporter-symbols.zip" "$symbols_url"

                            if [ $? -ne 0 ]; then
                                echo "Failed to download symbols from $symbols_url. Skipping..."
                                continue
                            fi

                            # Unzip the symbols
                            echo "Unzipping symbols..."
                            unzip -q "$project_dir/target.crashreporter-symbols.zip" -d "$symbols_dir"

                            if [ $? -ne 0 ]; then
                                echo "Failed to unzip symbols. Skipping..."
                                continue
                            fi

                            # Process the minidump crash reports
                            for dmp_file in "$project_dir"/*.dmp; do
                                if [ -f "$dmp_file" ]; then
                                    echo "Processing minidump file: $dmp_file"
                                    base_name=$(basename "${dmp_file%.dmp}")
                                    human_output_file="${base_name}.txt"
                                    json_output_file="${base_name}.json"

                                    minidump-stackwalk "$dmp_file" "$symbols_dir" --symbols-url https://symbols.mozilla.org --cyborg "$json_output_file" --output-file "$human_output_file"
                                    echo "Stackwalk outputs saved to $human_output_file and $json_output_file"
                                    crash_stack_processed=true
                                    mv "$human_output_file" "$json_output_file" processed_crash_reports/
                                else
                                    echo "No minidump files found in $project_dir"
                                fi
                            done

                            echo "crash_stack_processed=$crash_stack_processed" >> $GITHUB_OUTPUT

                            # Clean up symbols
                            rm -rf "$symbols_dir" "$project_dir/target.crashreporter-symbols.zip"

                         else
                            echo "No matrix_ids.json found in $project_dir. Skipping..."
                        fi
                    done
                else
                    echo "No projects found in crash_reports_unzipped."
                    exit 0  # Exit gracefully if no projects are found
                fi

            - name: Output crash data to summary
              if: steps.process_minidumps.outputs.crash_stack_processed == 'true'
              run: |
                echo "## Crash Report Summary" >> $GITHUB_STEP_SUMMARY
                for crash_file in processed_crash_reports/*.json; do
                  if [ -f "$crash_file" ]; then
                    echo "Processing crash file: $crash_file"
                    file=$(jq -r '.crashing_thread.frames[0].file // "N/A"' "$crash_file")
                    function=$(jq -r '.crashing_thread.frames[0].function // "N/A"' "$crash_file")
                    module=$(jq -r '.crashing_thread.frames[0].module // "N/A"' "$crash_file")
                    echo "### $(basename $crash_file)" >> $GITHUB_STEP_SUMMARY
                    echo "- **File**: $file" >> $GITHUB_STEP_SUMMARY
                    echo "- **Function**: $function" >> $GITHUB_STEP_SUMMARY
                    echo "- **Module**: $module" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "No crash files found."
                  fi
                done

            - name: Upload processed crash reports as a Github artifact
              if: steps.process_minidumps.outputs.crash_stack_processed == 'true'
              uses: actions/upload-artifact@v4.6.2
              with:
                name: processed-crash-reports
                path: processed_crash_reports/

            - name: Upload processed crash reports to Cloud Storage
              uses: 'google-github-actions/upload-cloud-storage@v2.2.3'
              id: upload_crash_reports
              with:
                path: processed_crash_reports
                destination: '${{ secrets.GCS_BUCKET_CRASH_REPORTS }}/public/firebase-test-lab-crashes-android/${{ matrix.project.name }}/reports/'
                glob: '**/*.txt'

            - name: Get public URL for the uploaded crash reports
              id: get_public_url
              if: steps.process_minidumps.outputs.crash_stack_processed == 'true'
              run: |
               echo "PUBLIC_URL=https://storage.googleapis.com/$(echo '${{ steps.upload_crash_reports.outputs.uploaded }}' | cut -d',' -f1 | sed 's|gs://||')" >> $GITHUB_ENV

            - name: Send Slack notification
              if: steps.process_minidumps.outputs.crash_stack_processed == 'true'
              uses: slackapi/slack-github-action@v2.1.1
              with:
                webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
                webhook-type: incoming-webhook
                channel-id: C016BC5FUHJ
                payload-file-path: ./scripts/src/crash-slack-payload.json
                payload-templated: true
              env:
                SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
                run_id: ${{ github.run_id }}
                repository: ${{ github.repository }}
                server_url: ${{ github.server_url }}
                public_url: ${{ env.PUBLIC_URL }}
    crash_stack_processed:
        name: Check if crash reports were processed
        runs-on: ubuntu-latest
        needs: process_minidumps
        if: needs.process_minidumps.outputs.crash_stack_processed == 'true'
        steps:
          - name: No-op
            run: echo "Crash reports were processed. Logged in Action Usage Metrics."
